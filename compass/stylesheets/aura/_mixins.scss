//////////////////////////////
// Aura Setup Mixin
//////////////////////////////
@mixin aura-setup {
  // Hard sets font-scale to false if width is set
  @if $width {
    $font-scale: false;
  }
  // Calculate HTML font size in Em
  $body-font-size-em: base-font-size();
  $body-font-size-px: bfs('px');
  $body-font-size-percent: bfs('%');
  $body-font-size-pt: bfs('pt');
  
  // Default Responsive Ratio if none is set
  // If using font-scale, suggest $major-third ratio. If not, suggest $golden ratio
  @if not $responsive-ratio {
    @if $font-scale {
      $responsive-ratio: $major-third;
    }
    @else {
      $responsive-ratio: $golden-ratio;
    }
  }
  
  // Define Initial Grid Dimensions
  @if $font-scale {
    $measure: $measure-width + 1/2 * $alphabet-count;
  }
  @else {
    $measure: $measure-width;
  }
  
  // Set up sidebars now as sidebars can affect $total-cols
  %primary-sidebar {
    @include columns($total-cols, $total-cols);
    margin-left: gutter();
    
    // Single column debugging for mobile-first design!
    @if $single-column == false {
      @include respond-to('small') {
        @include columns(sidebar-width());
      }
      
      @if nth($sidebars, 2) == 'left' or nth($sidebars, 2) == 'both'{
        float: none;
        @include respond-to('small') {
          @include alpha();
          float: left;
        }
      }
      @else if nth($sidebars, 2) == 'right' {
        float: none;
        @include respond-to('small') {
          float: left;
          @if nth($sidebars, 1) == 1 {
            margin-left: 0;
            margin-right: gutter();
          }
        }
      }
      @else if nth($sidebars, 2) == 'none' {
        float: none;
        @include respond-to('small') {
          float: right;
        }
      }
      @else {
        @warn 'Sidebar side can only have a value of left, right, both, or none';
      }
    }
    @else {
      float: none;
    }
  }
  
  %secondary-sidebar {
    @include columns($total-cols, $total-cols);
    margin-left: gutter();
    
    // Single column debugging for mobile-first design!
    @if $single-column == false {
      @include respond-to('small') {
        @include columns(sidebar-width($overflow: false));
      }
      
      @if nth($sidebars, 2) == 'left' {
        float: none;
        @include respond-to('small') {
          float: left;
        }
      }
      @else if nth($sidebars, 2) == 'right' {
        float: none;
        @include respond-to('small') {
          float: right;
          margin-left: 0;
          margin-right: gutter();
        }
      }
      @else if nth($sidebars, 2) == 'both' {
        float: none;
        @include respond-to('small') {
          float: right;
          margin-right: -1 * (columns($main-content-cols) + columns(sidebar-width($overflow: false)) + gutter());
        }
      }
      @else if nth($sidebars, 2) == 'none' {
        float: none;
        @include respond-to('small') {
          float: right;
        }
      }
      @else {
        @warn 'Sidebar side can only have a value of left, right, both, or none';
      }
    }
  }
  
  // Set UP Grid
  // If there's a width, figure out body-font-size for width
  @if $width {
    $width-em: px-em($width);
    $sub-col: $width-em / ($total-cols * gutter-col-total() + nth($gutter-to-col, 1));
    $col-width: $sub-col * nth($gutter-to-col, 2);
    $gutter-width: $sub-col * nth($gutter-to-col, 1);
    $side-gutter-width: $gutter-width;
  }
  @else {
    $col-total: col-total();
    $gutter-col-total: gutter-col-total();
    $gutter-col-grid: gutter-col-grid($col-total);
    $col-width: col-width($gutter-col-grid);
    $gutter-width: gutter-width($gutter-col-grid);
    $side-gutter-width: $gutter-width;
  }
  
  // Set Root Em
  html {
    // If Font Scale is enabled, set up root font scaling
    @if $font-scale {
      // Set base Root Font to -2 Modular Scale
      @include font-scale(-2);
      
      // Single column debugging for mobile-first design!
      @if $single-column == false {
        // At Small Responsive Scale, increase Modular Scale by 1
        @include respond-to('small') {
          @include font-scale(-1);
        }
        @include respond-to('medium') {
          @include font-scale(0);
        }
        // At Large Responsive Scale, increase Modular Scale by 2 to base
        @include respond-to('large') {
          @include font-scale(1);
        }
        @include respond-to('full') {
          @include font-scale(2);
        }
      }
    }
    // If Font Scale is disabled, set root font to base font size
    @else {
      font-size: $body-font-size-em;
      line-height: $body-font-size-em + $lh-addition;
    }
  }
  // If Object Scaling is enabled, set up object scaling
  @if $obj-scale {
    img, object, embed, iframe, video, audio {
      max-width: 100%;
    }
  }
  
  // Create Measure class to be extended
  %measure {
    @include full;
    
    // Single column debugging for mobile-first design!
    @if $single-column == false {
      @include respond-to('small') {
        @include columns($main-content-cols);
      }
      @if nth($sidebars, 2) == 'left'{
        float: none;
        @include respond-to('small') {
          float: right;
        }
      }
      @else if nth($sidebars, 2) == 'both' {
        float: none;
        @include respond-to('small') {
          float: right;
          @include alpha;
          margin-left: 0;
          margin-right: columns(sidebar-width($overflow: false)) + gutter() + gutter();
        }
      }
      @else if nth($sidebars, 2) == 'right' {
        float: none;
        @include respond-to('small') {
          @include alpha();
          float: left;
        }
      }
      @else if nth($sidebars, 2) == 'none' {
        float: none;
        @include respond-to('small') {
          @include alpha();
          float: left;
        }
      }
      @else {
        @warn 'Sidebar side can only have a value of left, right, both, or none';
      }

      // Add in "Omega"
      @if nth($sidebars, 2) == 'left' {
        @include respond-to('small') {
          margin-left: 0;
          margin-right: gutter();
        }
      }
    }
  }
  
  %aura-container {
    @include container;
  }
}

$modular-scale-loaded: false !default;

//////////////////////////////
// Aura Font Scale Font
//////////////////////////////
@mixin font-scale($scale) {
  $ms: ms($scale, $body-font-size-em, $responsive-ratio);
  font-size: $ms;
  line-height: $ms + (1em - (.5 * $ms));
  @if $modular-scale-loaded == false {
    @warn 'the font-scale mixin requires modular-scale to be loaded.';
  }
}

//////////////////////////////
// Aurora Respond-To
//////////////////////////////
@mixin respond-to($context) {
  @if $font-scale and not $aura-breakpoints {
    $aura-breakpoints: responsive-scale();
  }
  @else if not $font-scale and not $aura-breakpoints {
    $aura-breakpoints: responsive-ratio();
  }
  $i: 1 !default;
  @each $size in $sizes {
    @if $context == $size {
      $respond: nth($aura-breakpoints, $i);
      @include media-query($respond) {
        @content;
      }
    }
    $i: $i + 1;
  }
  
  @if $breakpoints != false {
    // Check to see if the 2nd item is a number. If it is, we've got a single query
    @if type-of(nth($breakpoints, 2)) == 'number' {
      // Check to see if the context matches the breakpoint namespace
      @if $context == nth($breakpoints, 1) {
        // Call Media Query Generator
        @include media-query-gen($breakpoints) {
          @content;
        }
      }
    }
    // Else, loop over all of them
    @else {
      // Loop over each breakpoint and check context
      @each $bkpt in $breakpoints {
        // If context is correctâ€¦
        @if $context == nth($bkpt, 1) {
          // Call the generator!
          @include media-query-gen($bkpt) {
            @content;
          }
        }
      }
    }
  }
}

@mixin media-query-gen($bpt) {
  // Get length of breakpoint variable, minus the namespace
  $length: length($bpt);
  // Go through all of the breakpoint items, starting at the second, and add them to a variable to be passed into the media query mixin
  $mq: false !default;
  @for $i from 2 through $length {
    // If it's the first item, override $mq
    @if $i == 2 {
      $mq: nth($bpt, $i);
    }
    // Else, join $mq
    @else {
      $mq: join($mq, nth($bpt, $i));
    }
  }
  // Call Media Query mixin
  @include media-query($mq) {
    @content;
  }
}

//////////////////////////////
// Generalized Media Query Mixin
//////////////////////////////
@mixin media-query($value, $operator: 'min-width', $query: 'screen') {
  // If a list is passed in for value, break it into value, operator, and query
  @if type-of($value) == 'list' {
    $mq: $value;
    
    @for $i from 1 through length($mq) {
      @if $i == 1 {
        $value: nth($mq, 1);
      }
      @else if $i == 2 {
        $operator: nth($mq, 2);
      }
      @else if $i == 3 {
        $query: nth($mq, 3);
      }
    }
  }
  
  @media #{$query} and (#{$operator}: #{$value}) {
    @content;
  }
}