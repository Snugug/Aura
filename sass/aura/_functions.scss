//////////////////////////////
// Converting between px and em
//////////////////////////////
@function px-em($px) {
  @return $px / $body-font-size-px * 1em;
}

@function em-em($em, $base: 14px) {
  @return $em * $base / $body-font-size-px;
}

@function em-px($em) {
  @return $em / $body-font-size-em * $body-font-size-px;
}

//////////////////////////////
// Find Base Font Size from Input Font Size;
//////////////////////////////
@function base-font-size() {
  $unit: unit($body-font-size);
  @if $unit == 'px' {
    @return $body-font-size / 16px * 1em;
  }
  @else if $unit == '%' {
    @return $body-font-size / 100% * 1em;
  }
  @else if $unit == 'em' {
    @return $body-font-size;
  }
  @else if $unit == 'pt' {
    @return $body-font-size / 12pt * 1em;
  }
  @else {
    @warn 'Variable $body-font-size does not have a valid font unit';
  }
}

//////////////////////////////
// Generates Body Font Sizes for each unit
//////////////////////////////
@function bfs($unit) {
  @if $unit == 'px' {
    @return $body-font-size-em / 1em * 16px;
  }
  @else if $unit == '%' {
    @return $body-font-size-em / 1em * 100%;
  }
  @else if $unit == 'em' {
    @return $body-font-size-em;
  }
  @else if $unit == 'pt' {
    @return $body-font-size-em / 1em * 12pt;
  }
  @else {
    @warn 'Invalid unit passed in.';
  }
}

//////////////////////////////
// Find Breakpoints for Non Modular-Scale
//////////////////////////////
@function responsive-ratio() {
  $full: columns-width();
  $aura-breakpoints: $full;
  
  @for $i from 1 through 3 {
    $bsize: nth($aura-breakpoints, $i) / $responsive-ratio;
    $aura-breakpoints: join($aura-breakpoints, $bsize);
  }
  @return $aura-breakpoints;
}

//////////////////////////////
// Find Breakpoints for Modular Scale
//////////////////////////////
@function responsive-scale() {
  @if $modular-scale-loaded == false {
    @warn 'the responsive-scale function requires modular-scale to be loaded. The responsive-ratio value was returned.';
    @return responsive-ratio();
  }
  $full: columns-width();
  $aura-breakpoints: $full;
  $scale-relation: -1 !default;
  @for $i from 1 through 3 {
    $measure: $measure-width;
    $scale-ratio: ms($scale-relation, $body-font-size-em, $responsive-ratio) / 1em;
    $scale-relation: $scale-relation - 1;
    
    $col-total: col-total();
    $gutter-col-grid: gutter-col-grid($col-total);
    $col-width: col-width($gutter-col-grid);
    $gutter-width: gutter-width($gutter-col-grid);
    $side-gutter-width: $gutter-width;
    
    $aura-breakpoints: join($aura-breakpoints, columns-width() * $scale-ratio);
    
  }
  @return $aura-breakpoints;
}
//////////////////////////////
// Aura Grid Functions
//////////////////////////////
// Returns Total Column Width
@function col-total() {
  @return $measure / $main-content-cols * 1em;
}
// Returns Total Number of Sub Column Pieces
@function gutter-col-total() {
  @return nth($gutter-to-col, 1) + nth($gutter-to-col, 2);
}
// Returns Width of One Full Column + Gutter
@function gutter-col-grid($col-total) {
  @return $col-total / $gutter-col-total;
}
// Returns Width of One Column
@function col-width($gutter-col-grid) {
  @return $gutter-col-grid * nth($gutter-to-col, 2);
}
// Returns Width of One Gutter
@function gutter-width($gutter-col-grid) {
  @return $gutter-col-grid * nth($gutter-to-col, 1);
}

//////////////////////////////
// Sidebar Functions
//////////////////////////////
@function sidebar-width($overflow: true) {
  // Grab number of sidebars
  $num: nth($sidebars, 1);
  
  @if $num > 2 or $num < 0 {
    @warn 'Invalid number of sidebars! You can have 0, 1, or 2 sidebars!';
    @return -1;
  }
  
  // Grab length of sidebar variable to determine how to act
  $length: length($sidebars);
  
  @if $length < 2 {
    @warn "Not enough arguments! You need to provide at least the number of sidebars and the side of the sidebar! If you do not want sidebars, set $sidebars: 0, 'none';";
    @return -1;
  }
  @else if $length > 4 {
    @warn "Too many arguments!";
    @return -1;
  }
  
  @if $length == 2 {
    @if $num == 0 {
      $total-cols: $main-content-cols;
      @return 0;
    }
    @else if $num == 1 {
      @return $total-cols - $main-content-cols;
    }
    @else if $num == 2 {
      $remainder: $total-cols - $main-content-cols;
      $floor: floor($remainder / 2);
      $extra: $remainder - $floor;
      $big: '';
      $small: '';
      @if $floor > $extra {
        $big: $floor;
        $small: $extra;
      }
      @else if $extra > $floor {
        $big: $extra;
        $small: $floor;
      }
      @else {
        $big: $floor;
        $small: $extra;
      }
      
      @if $overflow == true {
        @return $big;
      }
      @else {
        @return $small;
      }
    }
    @else {
      @warn 'Invalid number of sidebars! You can have 0, 1, or 2 sidebars!';
      @return -1;
    }
  }
  @else if $length == 3 {
    $sidebar-width: nth($sidebars, 3);
    @if is-int($sidebar-width) == false {
      @warn 'Sidebar width must be an integer!';
      @return -1;
    }
    
    @if $num == 0 {
      $total-cols: $main-content-cols;
      @return 0;
    }
    @else if $num == 1 {
      $total-cols: $main-content-cols + $sidebar-width;
      @return $sidebar-width;
    }
    @else if $num == 2 {
      $total-cols: $main-content-cols + 2 * $sidebar-width;
      @return $sidebar-width;
    }
  }
  @else if $length == 4 {
    $sidebar-1-width: nth($sidebars, 3);
    @if is-int($sidebar-1-width) == false {
      @warn 'First sidebar width must be an integer!';
      @return -1;
    }
    
    $sidebar-2-width: nth($sidebars, 4);
    @if is-int($sidebar-2-width) == false {
      @warn 'Second sidebar width must be an integer!';
      @return -1;
    }
    
   @if $num == 0 {
      $total-cols: $main-content-cols;
      @return 0;
    }
    @else if $num > 1 {
      $total-cols: $main-content-cols + $sidebar-1-width + $sidebar-2-width;
      
      $big: '';
      $small: '';
      
      @if $sidebar-1-width > $sidebar-2-width {
        $big: $sidebar-1-width;
        $small: $sidebar-2-width;
      }
      @else if $sidebar-1-width < $sidebar-2-width {
        $big: $sidebar-2-width;
        $small: $sidebar-1-width;
      }
      @else {
        $big: $sidebar-1-width;
        $small: $sidebar-2-width;
      }
      @if $overflow == true {
        @return $big;
      }
      @else {
        @return $small;
      }
    }
  }
}